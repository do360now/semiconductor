name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release and capture the version
        id: semantic_release  # Add an ID so you can refer to this step
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release > release_output.txt
          RELEASE_VERSION=$(grep -oP '(?<=The next release version is )\d+\.\d+\.\d+' release_output.txt)
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV

  
      - name: Update .env file with the version
        run: |
          sed -i "s/^VERSION=.*/VERSION=${{ env.RELEASE_VERSION }}/" .env
          echo "Updated .env with VERSION=${{ env.RELEASE_VERSION }}"

      - name: Update app/__version__.py with the version
        run: |
          echo "__version__ = '${{ env.RELEASE_VERSION }}'" > app/__version__.py
          echo "Updated app/__version__.py with VERSION=${{ env.RELEASE_VERSION }}"

      - name: Commit changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .env app/__version__.py
          git commit -m "Update version to ${{ env.RELEASE_VERSION }} in .env and app/__version__.py"
          git push

      - name: Log in to Docker Hub
        run: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build . -t do360now/semiconductor:${{ env.RELEASE_VERSION }}
          docker push do360now/semiconductor:${{ env.RELEASE_VERSION }}
